name: Deploy to EC2 via ECR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

#      - name: Lint
#        run: npm run lint

#      - name: Test
#        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: 331985399415.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: victoryvault-frontend
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_BASE_URL="${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" \
            --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID="${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}" \
            --build-arg NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME="${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}" \
            --build-arg NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET="${{ secrets.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET }}" \
            --build-arg NEXT_PUBLIC_WEBINY_API_URL="${{ secrets.NEXT_PUBLIC_WEBINY_API_URL }}" \
            --no-cache \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push image to ECR
        if: github.event_name == 'push'
        env:
          ECR_REGISTRY: 331985399415.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: victoryvault-frontend
          IMAGE_TAG: latest
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create .env file from secrets
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=${{ secrets.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET }}" >> .env
          echo "NEXT_PUBLIC_WEBINY_API_URL=${{ secrets.NEXT_PUBLIC_WEBINY_API_URL }}" >> .env
          

      - name: Copy docker-compose.yml and .env to EC2 instance
        if: github.event_name == 'push'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,.env"
          target: "/opt/victoryvault-frontend"

      - name: Deploy on EC2 via SSH
        if: github.event_name == 'push'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo mkdir -p /opt/victoryvault-frontend
            cd /opt/victoryvault-frontend
            
            # Login to ECR
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 331985399415.dkr.ecr.us-east-1.amazonaws.com
            
            # Stop existing containers
            echo "Stopping existing containers..."
            sudo docker compose down || true
            
            # Remove old images to force fresh pull
            echo "Removing old images..."
            sudo docker rmi 331985399415.dkr.ecr.us-east-1.amazonaws.com/victoryvault-frontend:latest || true
            
            # Force pull the latest image
            echo "Pulling latest image from ECR..."
            sudo docker compose pull --no-cache
            
            # Start the new containers
            echo "Starting new containers..."
            sudo docker compose up -d
            
            # Verify deployment
            echo "=== Deployment completed ==="
            echo "Container status:"
            sudo docker compose ps
            echo "Recent logs:"
            sudo docker compose logs --tail=10

      - name: Verify deployment
        if: github.event_name == 'push'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /opt/victoryvault-frontend
            echo "=== Final Verification ==="
            echo "Container Status:"
            sudo docker compose ps
            echo "Image Details:"
            sudo docker images | grep victoryvault-frontend
            echo "Recent Application Logs:"
            sudo docker compose logs --tail=20 